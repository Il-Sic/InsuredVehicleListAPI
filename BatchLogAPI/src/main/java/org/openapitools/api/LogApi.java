/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.LogPostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-22T10:25:13.637745700+02:00[Europe/Rome]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "log", description = "the log API")
public interface LogApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /log : Log data from batch process
     *
     * @param logPostRequest  (required)
     * @return Log successfully received (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "logPost",
        summary = "Log data from batch process",
        responses = {
            @ApiResponse(responseCode = "200", description = "Log successfully received"),
            @ApiResponse(responseCode = "400", description = "Bad request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/log",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> logPost(
        @Parameter(name = "LogPostRequest", description = "", required = true) @Valid @RequestBody LogPostRequest logPostRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
