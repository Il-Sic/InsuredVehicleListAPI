/*
 * Logging
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * InlineObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-17T11:49:39.570249900+02:00[Europe/Rome]")
public class InlineObject {
  public static final String SERIALIZED_NAME_TIME_OF_INVOCATION = "timeOfInvocation";
  @SerializedName(SERIALIZED_NAME_TIME_OF_INVOCATION)
  private OffsetDateTime timeOfInvocation;

  public static final String SERIALIZED_NAME_RECORD_NUMBER = "recordNumber";
  @SerializedName(SERIALIZED_NAME_RECORD_NUMBER)
  private Integer recordNumber;

  public static final String SERIALIZED_NAME_ACTUAL_PAYLOAD = "actualPayload";
  @SerializedName(SERIALIZED_NAME_ACTUAL_PAYLOAD)
  private String actualPayload;


  public InlineObject timeOfInvocation(OffsetDateTime timeOfInvocation) {
    
    this.timeOfInvocation = timeOfInvocation;
    return this;
  }

   /**
   * Get timeOfInvocation
   * @return timeOfInvocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2024-10-16T08:30Z", value = "")

  public OffsetDateTime getTimeOfInvocation() {
    return timeOfInvocation;
  }


  public void setTimeOfInvocation(OffsetDateTime timeOfInvocation) {
    this.timeOfInvocation = timeOfInvocation;
  }


  public InlineObject recordNumber(Integer recordNumber) {
    
    this.recordNumber = recordNumber;
    return this;
  }

   /**
   * Get recordNumber
   * @return recordNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Integer getRecordNumber() {
    return recordNumber;
  }


  public void setRecordNumber(Integer recordNumber) {
    this.recordNumber = recordNumber;
  }


  public InlineObject actualPayload(String actualPayload) {
    
    this.actualPayload = actualPayload;
    return this;
  }

   /**
   * Get actualPayload
   * @return actualPayload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Payload string content", value = "")

  public String getActualPayload() {
    return actualPayload;
  }


  public void setActualPayload(String actualPayload) {
    this.actualPayload = actualPayload;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject inlineObject = (InlineObject) o;
    return Objects.equals(this.timeOfInvocation, inlineObject.timeOfInvocation) &&
        Objects.equals(this.recordNumber, inlineObject.recordNumber) &&
        Objects.equals(this.actualPayload, inlineObject.actualPayload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeOfInvocation, recordNumber, actualPayload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject {\n");
    sb.append("    timeOfInvocation: ").append(toIndentedString(timeOfInvocation)).append("\n");
    sb.append("    recordNumber: ").append(toIndentedString(recordNumber)).append("\n");
    sb.append("    actualPayload: ").append(toIndentedString(actualPayload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

